{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","index.js","registerServiceWorker.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","event","this","onAdd","track","onRemove","isRemoval","className","onClick","name","artist","album","renderAction","React","Component","TrackList","tracks","map","id","Playlist","handleNameChange","onNameChange","target","value","onChange","playlistName","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","onSearch","setState","placeholder","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","savedTrack","push","filter","currentTrack","console","log","ReactDOM","render","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error"],"mappings":"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","file":"static/js/main.5681532c.chunk.js","sourcesContent":["const clientId = '73878f1441924c31a0a5a13ff0444c21';\n// const redirectUri = 'http://jammin_conz.surge.sh'\nconst redirectUri = 'http://localhost:3000';\n\nlet accessToken;\n\n\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return ;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;","import React from 'react';\n\nimport './Track.css'\n\n\nclass Track extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\n\t}\n\n\taddTrack(event) {\n\t\tthis.props.onAdd(this.props.track);\n\t}\n\n\tremoveTrack(event){\n\t\tthis.props.onRemove(this.props.track)\n\t}\n\n\trenderAction(){\n\t\tif (this.props.isRemoval){\n\t\t\treturn <button className=\"Track-action\" onClick={this.removeTrack} > - </button>;\n\t\t}\n\t\treturn <button className=\"Track-action\" onClick={this.addTrack} > + </button>;\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"Track\">\n  \t\t\t\t<div className=\"Track-information\">\n    \t\t\t\t<h3>{this.props.track.name}</h3>\n    \t\t\t\t<p> {this.props.track.artist} | {this.props.track.album} </p>\n  \t\t\t\t</div>\n  \t\t\t\t{this.renderAction()}\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default Track;","import React from 'react';\n\nimport './TrackList.css'\n\nimport Track from '../Track/Track'\n\n\nclass TrackList extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"TrackList\">\n    \t\t\t{ \n    \t\t\t\tthis.props.tracks.map(track => {\n    \t\t\t\t\treturn <Track track={track}\n    \t\t\t\t\t\t\t\t\tkey={track.id}\n    \t\t\t\t\t\t\t\t\tonAdd={this.props.onAdd}\n    \t\t\t\t\t\t\t\t\tonRemove={this.props.onRemove}\n    \t\t\t\t\t\t\t\t\tisRemoval={this.props.isRemoval} />\n \t\t\t   \t\t}) \n    \t\t\t}\n\t\t\t</div>\n\t\t\n\t\t);\n\t}\n}\n\n\nexport default TrackList;","import React from 'react';\n\nimport TrackList from '../TrackList/TrackList'\n\nimport './Playlist.css'\n\n\nclass Playlist extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\n\n\t}\n\n\n\n\thandleNameChange(event){\n\t\tthis.props.onNameChange(event.target.value);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"Playlist\">\n  \t\t\t\t<input onChange={this.handleNameChange} value={this.props.playlistName} />\n  \t\t\t\t<TrackList tracks={this.props.playlistTracks} \n  \t\t\t\t\t\t\t\n  \t\t\t\t\t\t\tisRemoval={true}\n  \t\t\t\t\t\t\tonRemove={this.props.onRemove}\n  \t\t\t\t/>\n  \t\t\t\t<button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default Playlist;","import React from  'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tterm: ''\n\t\t}\n\t\tthis.search = this.search.bind(this);\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\n\t}\n\n\tsearch() {\n\t\tthis.props.onSearch(this.state.term);\n\t}\n\n\thandleTermChange(event) {\n\t\tthis.setState({term: event.target.value});\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"SearchBar\">\n  \t\t\t\t<input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n  \t\t\t\t<button className=\"SearchButton\" onClick={this.search}   >SEARCH</button>\n\t\t\t</div>\t\t\t\n\t\t);\n\t}\n\n}\n\n\nexport default SearchBar;","import React from 'react';\n\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\n\nclass SearchResults extends React.Component {\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"SearchResults\">\n  \t\t\t\t<h2>Results</h2>\n  \t\t\t\t<TrackList \n  \t\t\t\t\ttracks={this.props.searchResults}\n  \t\t\t\t\tonAdd={this.props.onAdd} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SearchResults;","import React from 'react';\nimport './App.css';\n\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      console.log(\"THEN -> \", this.state.playlistName)\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n        console.log(\"BOTON -> \", this.state.playlistName)\n    });\n\n    console.log(\"AFTER: \", this.state.playlistName)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}"],"sourceRoot":""}