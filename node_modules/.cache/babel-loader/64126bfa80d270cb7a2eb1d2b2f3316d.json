{"ast":null,"code":"var clientId='73878f1441924c31a0a5a13ff0444c21';var redirectUri='http://jammin_conz.surge.sh';var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){console.log(\"BOTH AVAILABLE :  \",accessTokenMatch,expiresInMatch);accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('AccessToken',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artist,album:track.album,uri:track.uri};});});},savePlayList:function savePlayList(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["/home/constantine/Desktop/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","console","log","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '73878f1441924c31a0a5a13ff0444c21';\nconst redirectUri = 'http://jammin_conz.surge.sh'\n\nlet accessToken;\n\nconst Spotify = {\n\n\tgetAccessToken() {\n\t\tif (accessToken){\n\t\t\treturn accessToken;\n\t\t}\n\t\n\t    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n\t    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n\t    if ( accessTokenMatch && expiresInMatch ){\n\t    \tconsole.log( \"BOTH AVAILABLE :  \", accessTokenMatch, expiresInMatch)\n\t    \taccessToken = accessTokenMatch[1];\n\t    \tconst expiresIn = Number(expiresInMatch[1])\n\t    \twindow.setTimeout(()=> accessToken = '', expiresIn * 1000);\n\t    \twindow.history.pushState('AccessToken', null, '/')\n\t    \treturn accessToken;\n\t    } else {\n\t    \tconst accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n\t    \twindow.location = accessUrl;\n\t    \t}\n\t},\n\n\tsearch(term){\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t\t}\n\t\t}).then(response => {\n\t\t\treturn response.json();\n\t\t}).then(jsonResponse => {\n\t\t\tif (!jsonResponse){\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn jsonResponse.tracks.items.map(track => ({\n\t\t\t\tid: track.id,\n\t\t\t\tname: track.name,\n\t\t\t\tartist: track.artist,\n\t\t\t\talbum: track.album,\n\t\t\t\turi: track.uri\n\t\t\t}));\n\t\t});\n\t},\n\n\tsavePlayList(name, trackUris) {\n\t\tif( !name || !trackUris.length ){\n\t\t\treturn;\n\t\t}\n\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\tconst headers = { Authorization: `Bearer ${accessToken}`};\n\t\tlet userId;\n\n\t\treturn fetch('https://api.spotify.com/v1/me', {headers: headers}\n\t\t\t).then(response => response.json()\n\t\t\t).then(jsonResponse => {\n\t\t\t\tuserId = jsonResponse.id;\n\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response=> response.json()\n\n      ).then(jsonResponse => {\n      \tconst playlistId = jsonResponse.id;\n      \treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n\t});\n}\n\n};\n\nexport default Spotify"]},"metadata":{},"sourceType":"module"}