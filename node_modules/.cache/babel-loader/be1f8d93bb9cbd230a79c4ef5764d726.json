{"ast":null,"code":"const clientId = '73878f1441924c31a0a5a13ff0444c21';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (getAccessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      console.log(\"BOTH AVAILABLE :  \", accessTokenMatch, expiresInMatch);\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      windows.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('AccessToken', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}\n\t    \t&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(respone => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist,\n        album: track.album,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlayList(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/home/constantine/Desktop/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","console","log","expiresIn","Number","windows","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","respone","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '73878f1441924c31a0a5a13ff0444c21';\nconst redirectUri = 'http://localhost:3000/'\n\nlet accessToken;\n\nconst Spotify = {\n\n\tgetAccessToken() {\n\t\tif (getAccessToken){\n\t\t\treturn accessToken;\n\t\t}\n\t\n\t    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n\t    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n\t    if ( accessTokenMatch && expiresInMatch ){\n\t    \tconsole.log( \"BOTH AVAILABLE :  \", accessTokenMatch, expiresInMatch)\n\t    \taccessToken = accessTokenMatch[1];\n\t    \tconst expiresIn = Number(expiresInMatch[1])\n\t    \twindows.setTimeout(()=> accessToken = '', expiresIn * 1000);\n\t    \twindow.history.pushState('AccessToken', null, '/')\n\t    \treturn accessToken;\n\t    } else {\n\t    \tconst accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}\n\t    \t&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n\t    \twindow.location = accessUrl;\n\t    \t}\n\t},\n\n\tsearch(term){\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t\t}\n\t\t}).then(respone => {\n\t\t\treturn response.json();\n\t\t}).then(jsonResponse => {\n\t\t\tif (!jsonResponse){\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn jsonResponse.tracks.items.map(track => ({\n\t\t\t\tid: track.id,\n\t\t\t\tname: track.name,\n\t\t\t\tartist: track.artist,\n\t\t\t\talbum: track.album,\n\t\t\t\turi: track.uri\n\t\t\t}));\n\t\t});\n\t},\n\n\tsavePlayList(name, trackUris) {\n\t\tif( !name || !trackUris.length ){\n\t\t\treturn;\n\t\t}\n\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\tconst headers = { Authorization: `Bearer ${accessToken}`};\n\t\tlet userId;\n\n\t\treturn fetch('https://api.spotify.com/v1/me', {headers: headers}\n\t\t\t).then(response => response.json()\n\t\t\t).then(jsonResponse => {\n\t\t\t\tuserId = jsonResponse.id;\n\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response=> response.json()\n\n      ).then(jsonResponse => {\n      \tconst playlistId = jsonResponse.id;\n      \treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n\t});\n}\n\n};\n\nexport default Spotify"]},"metadata":{},"sourceType":"module"}